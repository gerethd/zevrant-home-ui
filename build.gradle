plugins {
  id 'org.springframework.boot' version '2.2.2.RELEASE'
  id 'io.spring.dependency-management' version '1.0.8.RELEASE'
  id "com.moowork.node" version "1.3.1"
  id 'org.sonarqube' version '2.7'
  id 'java'
}

group = 'net.zevrant-services.home.ui'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

if (project.hasProperty('projVersion')) {
  project.version = project.projVersion
  ext.isSnapshot = false
} else {
  project.version = '0.0.1-snapshot'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url "s3://zevrant-artifact-store"
    authentication {
      awsIm(AwsImAuthentication)
    }
  }
}

ext {
  set('springCloudVersion', "Hoxton.RELEASE")
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
  implementation 'org.springframework.cloud:spring-cloud-starter-oauth2'
  implementation 'org.springframework.cloud:spring-cloud-starter-security'
  testImplementation('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}


node {
  download = false
}

npm_run_build {
  // make sure the build task is executed only when appropriate files change
  inputs.files fileTree('src/main')

  // 'node_modules' appeared not reliable for dependency change detection (the task was rerun without changes)
  // though 'package.json' and 'package-lock.json' should be enough anyway
  inputs.file 'package.json'
  inputs.file 'package-lock.json'

  outputs.file 'src/main/static/resources/index.html'
  outputs.file 'src/main/static/resources/main-es5.js'
  outputs.file 'src/main/static/resources/main-es2015.js'
  outputs.file 'src/main/static/resources/polyfill-es5.js'
  outputs.file 'src/main/static/resources/runtime-es5.js'
  outputs.file 'src/main/static/resources/styles-es5.js'
  outputs.file 'src/main/static/resources/styles-es2015.js'
  outputs.file 'src/main/static/resources/vendor-es5.js'
  outputs.file 'src/main/static/resources/vendor-es2015.js'

}

npmInstall {
  this.project.beforeEvaluate {
    this.project.node.nodeModulesDir = file('src/main/resources/static')
    this.project.extensions.getByType(NodeExtension).nodeModulesDir = file('src/main/resources/static')
  }
}

test {
  useJUnitPlatform()
}

npm_run_test {

}

tasks.compileJava.finalizedBy tasks.npm_run_build
tasks.test.finalizedBy tasks.npm_run_test
