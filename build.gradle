plugins {
  id 'org.springframework.boot' version '2.2.2.RELEASE'
  id 'io.spring.dependency-management' version '1.0.8.RELEASE'
  id "com.github.node-gradle.node" version "2.0.0"
  id 'org.sonarqube' version '2.7'
  id 'java'
}

group = 'net.zevrant-services.home.ui'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.11'

if (project.hasProperty('projVersion')) {
  project.version = project.projVersion
  ext.isSnapshot = false
} else {
  project.version = '0.0.1-snapshot'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url "s3://zevrant-artifact-store"
    authentication {
      awsIm(AwsImAuthentication)
    }
  }
}

ext {
  set('springCloudVersion', 'Hoxton.RELEASE')
}

dependencies {
  implementation 'net.zevrant-services:zevrant-security-common:0.0.37'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
  implementation 'org.springframework.cloud:spring-cloud-starter-oauth2'
  implementation 'org.springframework.cloud:spring-cloud-starter-netflix-zuul'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}


node {
  version = '10.16.3'
  download = true
  distBaseUrl = 'https://nodejs.org/dist'
}

npmInstall {
  inputs.file 'package.json'
  inputs.file 'package-lock.json'

  outputs.files fileTree('nodeModules')
}

npm_run_build {
  // make sure the build task is executed only when appropriate files change
//  inputs.files fileTree('src/main/angular')
//
//  // 'node_modules' appeared not reliable for dependency change detection (the task was rerun without changes)
//  // though 'package.json' and 'package-lock.json' should be enough anyway
  outputs.upToDateWhen { false }

//
  outputs.file 'src/main/resources/static/index.html'
  outputs.file 'src/main/resources/static/main-es5.js'
  outputs.file 'src/main/resources/static/main-es2015.js'
  outputs.file 'src/main/resources/static/polyfill-es5.js'
  outputs.file 'src/main/resources/static/runtime-es5.js'
  outputs.file 'src/main/resources/static/styles-es5.js'
  outputs.file 'src/main/resources/static/styles-es2015.js'
  outputs.file 'src/main/resources/static/vendor-es5.js'
  outputs.file 'src/main/resources/static/vendor-es2015.js'

}

test {
  useJUnitPlatform()
}

clean {
    doFirst {
      delete files("${rootDir}/src/main/resources/static/")
    }
}

task npm_run_test(type: NpmTask) {
  args = ['run', 'test']
}

tasks.compileJava.finalizedBy tasks.npm_run_build
tasks.npm_run_build.dependsOn(tasks.npmInstall)
tasks.test.finalizedBy tasks.npm_run_test
